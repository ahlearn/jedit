/* Switch_Recent.bsh - a BeanShell macro script for displaying
 * and switching between open buffers (in most recently viewed order).
 * This is similar to the functionality provided by Alt+Tab in Windows.
 *
 * It is assumed that this macro is mapped to the Ctrl-Tab shortcut.
 *
 * Modified from Buffer_Switcher.bsh written by Ollie Rutherfurd: http://web.mit.edu/~jedit/arch/java/versions/4.3pre5/macros/Files/Buffer_Switcher.bsh
 *   Copyright (C) 2001-2004 Ollie Rutherfurd, oliver@rutherfurd.net
 *
 * {{{ License
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the jEdit program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * }}}
 *
 * @author AhLeung Cheng
 */

BufferCellRenderer() {
	Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
		l = new JLabel();
		l.setOpaque(true);
		l.setText(value.toString());
		l.setIcon(value.getIcon());
		l.setBorder(new javax.swing.border.EmptyBorder(3,3,3,3));
		Font f = l.getFont();
		l.setFont(f.deriveFont(f.getSize()+5.0f));	// bufferList.setFont doesn't work
		if (isSelected) {
			l.setBackground(list.getSelectionBackground());
			l.setForeground(list.getSelectionForeground());
		}
		else {
			l.setBackground(list.getBackground());
			l.setForeground(list.getForeground());
		}
		return l;
	}
	return this;
}

SwitchRecentDialog(doModal, dialogDimension) {
	Buffer[] openBuffers = jEdit.getBuffers();
	int listLength = openBuffers.length;
	dialog = new JDialog(view, "" + listLength + " open buffers", doModal);

	BufferHistory.Entry[] historyEntries = BufferHistory.getHistory().toArray(new BufferHistory.Entry[0]);
	Map map = new TreeMap();	// sort the list by tree map
	for (int i=0; i<listLength; i++) {
		int position = historyEntries.length;	// default position = at the end
		for (int j=0; j<historyEntries.length; j++) {
			if (openBuffers[i].getPath().equals(historyEntries[j].path)) { position = j; break; }
		}
		map.put(position, openBuffers[i]);
	}
	bufferList = new JList(map.values().toArray());		// set the sorted list as bufferList data
	bufferList.setCellRenderer(BufferCellRenderer());
	bufferList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	bufferList.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, java.util.Collections.EMPTY_SET);	// To capture the TAB key
	bufferList.setSelectedIndex(listLength>1? 1:0);	// select the next recent buffer
	bufferList.addKeyListener(this);
	bufferList.addMouseListener(this);

	dialog.setContentPane(new JScrollPane(bufferList, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED));
	dialog.setMinimumSize(dialogDimension);
	dialog.setMaximumSize(dialogDimension);
	dialog.setLocationRelativeTo(view);
	dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
	dialog.setVisible(true);

	void switchBuffer() {
		view.getEditPane().setBuffer(bufferList.getSelectedValue());
	}

	void keyPressed(evt) {
		evt.consume();
		switch (evt.getKeyCode()) {
		case KeyEvent.VK_BACK_QUOTE:
			selected = (bufferList.getSelectedIndex()+listLength-1)%listLength;
			bufferList.setSelectedIndex(selected);
			bufferList.ensureIndexIsVisible(selected);
			break;
		case KeyEvent.VK_TAB:
			selected = (bufferList.getSelectedIndex()+1)%listLength;
			bufferList.setSelectedIndex(selected);
			bufferList.ensureIndexIsVisible(selected);
			break;
		case KeyEvent.VK_ESCAPE:
			dialog.dispose();
			break;
		}
	}
	void keyReleased(evt) {
		if (evt.getKeyCode() == KeyEvent.VK_CONTROL) {
			switchBuffer();
			dialog.dispose();
		}
	}
	void keyTyped(evt) {}

	void mouseClicked(evt) {
		if (SwingUtilities.isLeftMouseButton(evt)) {
			switchBuffer();
			dialog.dispose();
		}
		else if (SwingUtilities.isRightMouseButton(evt)) {
			bufferList.setSelectedIndex( bufferList.locationToIndex(evt.getPoint()) );
			switchBuffer();
		}
	}
	void mouseEntered(evt){}
	void mouseExited(evt){}
	void mousePressed(evt){}
	void mouseReleased(evt){}
}

SwitchRecentDialog(false, new Dimension(600, 400));


